<?php

namespace Tests\Unit;

use App\MiepClient\MiepClient;
use App\MiepClient\MiepProvider;
use Illuminate\Validation\UnauthorizedException;
use League\OAuth2\Client\Token\AccessToken;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

class MiepClientTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testAuthorize()
    {
        $providerMock = $this->createMock(MiepProvider::class);
        $providerMock->expects($this->once())
            ->method('getAccessToken')
            ->with($this->equalTo('client_credentials'))
            ->willReturn($this->createMock(AccessToken::class));

        $client = new MiepClient($providerMock);
        $client->authorize(); // Initialise token

        $client->authorize(); // Run again, should not call getAccessToken again
    }

    // This will also test getParsed()
    public function testBrokersNotAuthorized()
    {
        $providerMock = $this->createMock(MiepProvider::class);
        $providerMock->expects($this->never()) // We should never reach the point where we ask for a request
            ->method('getAuthenticatedRequest');
        $providerMock->expects($this->never()) // This test is wrong if a token is requested
            ->method('getAccessToken')
            ->with($this->equalTo('client_credentials'))
            ->willReturn($this->createMock(AccessToken::class));

        $client = new MiepClient($providerMock);

        $this->expectException(UnauthorizedException::class);
        $this->expectExceptionMessageMatches('/.*authorize\(\).*/');

        $client->brokers(); // get() is protected, so I use brokers() as it requires no extra information
    }

    public function testBrokersAuthorized()
    {
        $token = $this->createMock(AccessToken::class);
        $request = $this->createMock(RequestInterface::class);
        $testArray = ['testing' => 'okay'];
        $providerMock = $this->createMock(MiepProvider::class);

        $providerMock->expects($this->once())
        ->method('getAuthenticatedRequest')
            ->with('GET', 'https://ep.max-immo.be/api/brokers', $token, [])
            ->willReturn($request);

        $providerMock->expects($this->once())
            ->method('getParsedResponse')
            ->with($request)
            ->willReturn($testArray);

        $providerMock->expects($this->once())
        ->method('getAccessToken')
            ->with($this->equalTo('client_credentials'))
            ->willReturn($token);

        $client = new MiepClient($providerMock);

        $result = $client->authorize()->brokers(); // The mocks will automatically assert what we need to assert
        $this->assertEquals($testArray, $result);
    }

    public function testBrokerNoBroker()
    {
        $providerMock = $this->createMock(MiepProvider::class);
        $providerMock->expects($this->once())
            ->method('getAccessToken')
            ->with($this->equalTo('client_credentials'))
            ->willReturn($this->createMock(AccessToken::class));

        $client = new MiepClient($providerMock);

        $this->expectException(\BadMethodCallException::class);
        $this->expectExceptionMessageMatches('/.*withBroker\(.*/');

        $client->authorize()->broker();
    }

    public function testBroker()
    {
        $brokerId = strval(random_int(0, 500));
        $token = $this->createMock(AccessToken::class);
        $providerMock = $this->createMock(MiepProvider::class);
        $providerMock->expects($this->once())
            ->method('getAccessToken')
            ->with($this->equalTo('client_credentials'))
            ->willReturn($token);
        $providerMock->expects($this->once())
            ->method('getAuthenticatedRequest')
            ->with('GET', 'https://ep.max-immo.be/api/brokers/' . $brokerId, $token, [])
            ->willReturn($this->createMock(RequestInterface::class));
        $providerMock->expects($this->once())
            ->method('getParsedResponse')
            ->willReturn(['id' => $brokerId]);

        $client = new MiepClient($providerMock);

        $response = $client->authorize()->withBroker($brokerId)->broker();
        $this->assertEquals(['id' => $brokerId], $response);
    }
}
